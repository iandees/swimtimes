<?php
// auto-generated by sfPropelCrud
// date: 2006/11/29 13:34:01
?>
<?php

/**
 * time actions.
 *
 * @package    sf_sandbox
 * @subpackage time
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 2288 2006-10-02 15:22:13Z fabien $
 */
class timeActions extends sfActions
{
  public function executeIndex ()
  {
    return $this->forward('time', 'list');
  }

  public function executeList ()
  {
    $this->times = TimePeer::doSelect(new Criteria());
  }

  public function executeShow ()
  {
    $this->time = TimePeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->time);
  }

  public function executeCreate ()
  {
    $this->time = new Time();

    $this->setTemplate('edit');
  }

  public function executeEdit ()
  {
    $this->time = TimePeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->time);
  }

  public function executeUpdate ()
  {
    if (!$this->getRequestParameter('id', 0))
    {
      $time = new Time();
    }
    else
    {
      $time = TimePeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($time);
    }

    $time->setId($this->getRequestParameter('id'));
    $time->setSwimmerId($this->getRequestParameter('swimmer_id'));
    $time->setMeetId($this->getRequestParameter('meet_id'));
    $time->setEventId($this->getRequestParameter('event_id'));
    $time->setTime($this->getRequestParameter('time'));
    $time->setPlace($this->getRequestParameter('place'));
    $time->setLane($this->getRequestParameter('lane'));

    $time->save();

    return $this->redirect('time/show?id='.$time->getId());
  }

  public function executeDelete ()
  {
    $time = TimePeer::retrieveByPk($this->getRequestParameter('id'));

    $this->forward404Unless($time);

    $time->delete();

    return $this->redirect('time/list');
  }
}
